# RUN: toyc-lab %s -emit=ast 2>&1 | FileCheck %s

def main() {
  # Define a variable `a` with shape <2, 3>, initialized with the literal value.
  # The shape is inferred from the supplied literal.
  var a = [[1, 2, 3], [4, 5, 6]];
  # b is identical to a, the literal array is implicitly reshaped: defining new
  # variables is the way to reshape arrays (element count in literal must match
  # the size of specified shape).
  var b<2, 3> = [1, 2, 3, 4, 5, 6];

  # Calls the element wise subtraction operation with <2, 3> for both
  # arguments and deduce a return type of <2, 3> in initialization of `c`.
  var c = a - b;
}


# CHECK: Module:
# CHECK-NEXT:     Function
# CHECK-NEXT:       Proto 'main' @{{.*}}ast.toy:3:1
# CHECK-NEXT:       Params: []
# CHECK-NEXT:       Block {
# CHECK-NEXT:         VarDecl a<> @{{.*}}ast.toy:6:3
# CHECK-NEXT:           Literal: <2, 3>[ <3>[ 1.000000e+00, 2.000000e+00, 3.000000e+00], <3>[ 4.000000e+00, 5.000000e+00, 6.000000e+00]] @{{.*}}ast.toy:6:11
# CHECK-NEXT:         VarDecl b<2, 3> @{{.*}}ast.toy:10:3
# CHECK-NEXT:           Literal: <6>[ 1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00] @{{.*}}ast.toy:10:17
# CHECK-NEXT:         VarDecl c<> @{{.*}}ast.toy:14:3
# CHECK-NEXT:           BinOp: -  @{{.*}}ast.toy:14:15
# CHECK-NEXT:             var: a @{{.*}}ast.toy:14:11
# CHECK-NEXT:             var: b @{{.*}}ast.toy:14:15
# CHECK-NEXT:       } // Block
